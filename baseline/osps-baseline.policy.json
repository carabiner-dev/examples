{
    "id": "OSPS",
    "policies": [
        {
            "id": "OSPS-AC-01",
            "meta": {
                "description": "The project's version control system MUST require multi-factor authentication that does not include SMS ",
                "assert_mode": "AND",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "AC-01" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "github.orgDescriptorFromURI(predicate.data.materials[0].uri)"
                    }
                }
            ],
           "tenets": [
                {
                    "code": "outputs.members.all(member, member.hasTwoFactorEnabled) && size(outputs.members) > 0",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/mfa.yaml"]
                    },
                    "outputs": {
                        "members": {
                            "code": "has(predicates[0].data.values.data.organization.membersWithRole) ? (has(predicates[0].data.values.data.organization.membersWithRole.edges) ? predicates[0].data.values.data.organization.membersWithRole.edges : []) : []"
                        }
                    },
                    "assessment": {
                        "message": "Multi-factor authentication is enabled for all members in the organization"
                    },
                    "error": {
                        "message": "Multifactor authentication is not enabled for some members",
                        "guidance": "Enable MFA in the GitHub organization settings to force all members to turn it on"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-AC-03",
            "meta": {
                "description": "VCS MUST prevent unintentional modification of the primary branch.",
                "assert_mode": "AND",
                "controls": [ { "class": "OSPS", "id": "AC-03" } ],
                "enforce": "OFF"
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "github.branchDescriptorFromURI(predicate.data.materials[0].uri, \"main\")"
                    }
                }
            ],
            "tenets": [
                {
                    "code": "size(predicates) > 0",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/branch-rules.yaml"]
                    },
                    "assessment": {
                        "message": "Found attested branch protection metadata"
                    }
                },
                {
                    "id": "01",
                    "code": "has(predicates[0].data.values) ? predicates[0].data.values.exists(rule, rule.type == \"non_fast_forward\") : false",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/branch-rules.yaml"]
                    },
                    "assessment": {
                        "message": "Force pushing is disabled on default branch"
                    },
                    "error": {
                        "message": "Force pushes can be sent to main branch",
                        "guidance": "Create a branch ruleset protecting your default branch and enable \"Block force pushes\""
                    }
                },
                {
                    "id": "02",
                    "code": "has(predicates[0].data.values) ? predicates[0].data.values.exists(rule, rule.type == \"deletion\") : false",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/branch-rules.yaml"]
                    },
                    "assessment": {
                        "message": "Branch deletion is disabled on default branch"
                    },
                    "error": {
                        "message": "Branch delete protection is not enabled",
                        "guidance": "Create a branch ruleset protecting your default branch and enable \"Restrict deletions\""
                    }
                }                
            ]            
        },
        {
            "id": "OSPS-AC-04",
            "meta": {
                "enforce": "OFF",
                "description": "CI/CD pipelines MUST follow the principle of least privilege",
                "controls": [ { "class": "OSPS", "id": "AC-04" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-scorecard",
                    "code": "outputs.bin_artifacts_checks.all(c, c.score == 10)",
                    "outputs": {
                        "bin_artifacts_checks": { "code": "has(predicates[0].data.checks) ? predicates[0].data.checks.filter(c, c.name == 'Token-Permissions' && has(c.score)) : [] " }
                    },
                    "predicates": {
                        "types": ["https://scorecard.dev/result/v0.1"]
                    },
                    "assessment": {
                        "message": "Scorecard reports workflows are configured with least privileges"
                    },
                    "error": {
                        "message": "Scorecard detected workflows with excessivce permissions",
                        "guidance": "Ensure workflows drop all privileges and only escalte when needed"
                    }
                }
            ]
        },
        {
            "id": "OSPS-GV-01",
            "meta": {
                "description": "Documentation MUST include the roles and responsibilities for members of the project.",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "GV-01" } ],
                "assert_mode": "OR"
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-si",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "code": "outputs.admins.found ",
                    "outputs": {
                        "admins": {
                            "code": "has(predicates[0].data.project) ? (has(predicates[0].data.project.administrators) ? {'found': true,  'admins': predicates[0].data.project.administrators } : {'found': false,  'admins': [] } ) : {'found': false,  'admins': [] } "
                        }
                    },
                    "assessment": {
                        "message": "Administrators listed in Securty Insights"
                    },
                    "error": {
                        "message": "Security Insights has no project administrators",
                        "guidance": "List the project admins in your SI yaml under repository.administrators"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-GV-02",
            "meta": {
                "description": "The project MUST have one or more mechanisms for public discussions about proposed changes and usage obstacles.",
                "assert_mode": "AND",
                "controls": [
                    { "class": "OSPS", "id": "GV-02" }
                ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "github.repoDescriptorFromURI(predicate.data.materials[0].uri)"
                    }
                }
            ],
            "identities": [
                {
                    "sigstore": {
                        "mode": "exact",
                        "issuer": "https://accounts.google.com",
                        "identity": "puerco@carabiner.dev"
                   }
                }
            ],
            "tenets": [
                {
                    "code": "size(predicates) > 0",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/repo.yaml"]
                    },
                    "assessment": {
                        "message": "Found attested repository data"
                    }
                },
                {
                    "id": "01",
                    "code": "outputs[\"issues\"]",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/repo.yaml"]
                    },
                    "outputs": {
                        "issues": {
                            "code": "has(predicates[0].data.values.has_issues) ? predicates[0].data.values.has_issues : false"
                        }
                    },
                    "assessment": {
                        "message": "Issues feature is enabled in the repository"
                    },
                    "error": {
                        "message": "Issues are not enabled in the repo",
                        "guidance": "Turn on the issues setting in the repository"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-GV-03",
            "meta": {
                "description": "The project documentation MUST include an explanation of the contribution process.",
                "enforce": "OFF",
                "controls": [
                    { "class": "OSPS", "id": "GV-03" }
                ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01",
                    "code": "size(outputs[\"files\"]) > 0",
                    "predicates": {
                        "types": ["https://spdx.dev/Document", "https://cyclonedx.org/bom"]
                    },
                    "outputs": {
                        "files": {
                            "code": "sboms[0].get_node_list().get_nodes().filter(n, n.name == \"CONTRIBUTING.md\")"
                        }
                    },
                    "assessment": {
                        "message": "Found a CONTRIBUTING.md file"
                    },
                    "error": {
                        "message": "Repository has no CONTRIBUTING.md file",
                        "guidance": "Write up the project's contribution process into a CONTRIBUTING.md file and check it into the repository."
                    }
                }
            ]            
        },
        {
            "id": "OSPS-LE-03",
            "meta": {
                "description": "When an official release is created, that release MUST contain a descriptive log of functional and security modifications.",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "LE-03" } ],
                "assert_mode": "OR"
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-sbom",
                    "code": "size(outputs[\"files\"]) > 0",
                    "predicates": {
                        "types": ["https://spdx.dev/Document", "https://cyclonedx.org/bom"]
                    },
                    "outputs": {
                        "files": {
                            "code": "sboms[0].get_node_list().get_nodes().filter(n, (n.name == 'LICENSE' || n.name == 'LICENSE.txt' ))"
                        }
                    },
                    "assessment": {
                        "message": "Found a license file in the project's SBOM."
                    },
                    "error": {
                        "message": "Could not detect a license file in the SBOM.",
                        "guidance": "Add a file named LICENSE to your project's codebase."
                    }
                },
                {
                    "id": "01-si",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "code": "outputs.license != '' ",
                    "outputs": {
                        "license": {
                            "code": "has(predicates[0].repository) ? (has(predicates[0].repository.license) ? (has(predicates[0].repository.license.expression) ? predicates[0].repository.license.expression : '' ) : '' ) : '' "
                        }
                    },
                    "assessment": {
                        "message": "Found a license entry in the project's security insights file."
                    },
                    "error": {
                        "message": "Could not detect a license entry in the security insights file.",
                        "guidance": "Add a license entry to your SI file under repository.release.license"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-QA-01",
            "meta": {
                "description": "The project's source code and change history MUST be publicly readable at a static URL",
                "assert_mode": "AND",
                "controls": [
                    { "class": "OSPS", "id": "QA-01" }
                ]
            },
            "identities": [
                {
                    "sigstore": {
                        "mode": "exact",
                        "issuer": "https://accounts.google.com",
                        "identity": "puerco@carabiner.dev"
                   }
                }
            ],
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "github.repoDescriptorFromURI(predicate.data.materials[0].uri)"
                    }
                }
            ],
            "tenets": [
                {
                    "code": "size(predicates) > 0",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/repo.yaml"]
                    },
                    "assessment": {
                        "message": "Found attested repository data"
                    }
                },
                {
                    "id": "01",
                    "code": "outputs[\"public\"]",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/repo.yaml"]
                    },
                    "outputs": {
                        "public": {
                            "code": "has(predicates[0].data.values.visibility) ? predicates[0].data.values.visibility == \"public\" : false"
                        }
                    },
                    "assessment": {
                        "message": "Code repository is public"
                    },
                    "error": {
                        "message": "Repository is private",
                        "guidance": "Enable public visibility in the repository settings"
                    }
                },
                {
                    "id": "02",
                    "code": "outputs[\"git\"] != ''",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/repo.yaml"]
                    },
                    "outputs": {
                        "git": {
                            "code": "has(predicates[0].data.values.git_url) ? predicates[0].data.values.git_url : '' "
                        }
                    },
                    "assessment": {
                        "message": "Code stored in git repository"
                    },
                    "error": {
                        "message": "No git repository found",
                        "guidance": "Ensure the project's code is available in git or other VCS"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-QA-02",
            "meta": {
                "description": "The source code repository MUST contain a dependency list (direct)",
                "assert_mode": "OR",
                "controls": [
                    { "class": "OSPS", "id": "QA-02" }
                ]
            },
            "identities": [
                {
                    "sigstore": {
                        "mode": "exact",
                        "issuer": "https://accounts.google.com",
                        "identity": "puerco@carabiner.dev"
                   }
                }
            ],
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "code": "size(predicates) > 0",
                    "predicates": {
                        "types": ["https://spdx.dev/Document"]
                    },
                    "assessment": {
                        "message": "Found attested SBOM (SPDX)"
                    },
                    "error": {
                        "message": "No SPDX SBOM found",
                        "guidance": "Generate an SPDX SBOM from your code"
                    }
                },
                {
                    "code": "size(predicates) > 0",
                    "predicates": {
                        "types": ["https://cyclonedx.org/bom"]
                    },
                    "assessment": {
                        "message": "Found attested SBOM (CycloneDX)"
                    },
                    "error": {
                        "message": "No CycloneDX SBOM found",
                        "guidance": "Generate a CycloneDX SBOM from your code"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-QA-03",
            "meta": {
                "enforce": "OFF",
                "description": "automated status checks for commits MUST pass or be manually bypassed.",
                "controls": [
                    { "class": "OSPS", "id": "QA-03" }
                ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "github.branchDescriptorFromURI(predicate.data.materials[0].uri, \"main\")"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01",
                    "code": "has(predicates[0].data.values) ? predicates[0].data.values.exists(rule, rule.type == \"required_status_checks\") : false",
                    "predicates": {
                        "types": ["http://github.com/carabiner-dev/snappy/specs/branch-rules.yaml"]
                    },
                    "assessment": {
                        "message": "Status checks enforced"
                    },
                    "error": {
                        "message": "Add a branch rule to ensure status checks must pass",
                        "guidance": "Enable \"Require status checks to pass\" in the repository branch rulesets"
                    }
                }
            ]
        },
        {
            "id": "OSPS-QA-04",
            "meta": {
                "enforce": "OFF",
                "description": "subproject code repositories MUST enforce the same security requirements",
                "assert_mode": "AND",
                "controls": [
                    { "class": "OSPS", "id": "QA-04" }
                ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-si",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "code": "outputs.subprojects.found",
                    "outputs": {
                        "subprojects": {
                            "code": "has(predicates[0].data.project) ? (has(predicates[0].data.project.repositories) ? {'found': true, 'subprojects': predicates[0].data.project.repositories } : {'found': false, 'subprojects': [] } ) : {'found': false, 'subprojects': [] }"
                        }
                    },
                    "assessment": {
                        "message": "Found a changelog entry in the project's security insights file."
                    },
                    "error": {
                        "message": "Could not find subprojects in security insights.",
                        "guidance": "Add a subprojects list (empty will do) to SI YAML under project.repositories"
                    }
                }
            ]
        },
        {
            "id": "OSPS-QA-05",
            "meta": {
                "enforce": "OFF",
                "description": "The version control system MUST NOT contain generated executable artifacts",
                "controls": [ { "class": "OSPS", "id": "QA-05" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-scorecard",
                    "code": "outputs.bin_artifacts_checks.all(c, c.score == 10)",
                    "outputs": {
                        "bin_artifacts_checks": { "code": "has(predicates[0].data.checks) ? predicates[0].data.checks.filter(c, c.name == 'Binary-Artifacts' && has(c.score)) : [] " }
                    },
                    "predicates": {
                        "types": ["https://scorecard.dev/result/v0.1"]
                    },
                    "assessment": {
                        "message": "Scorecard did not detect any binaries in the repo"
                    },
                    "error": {
                        "message": "Scorecard detected binaries in the repository",
                        "guidance": "Check your codebase and remove any checked-in executables"
                    }
                }
            ]
        },
        {
            "id": "OSPS-QA-06",
            "meta": {
                "enforce": "OFF",
                "description": " the project's CI/CD pipelines MUST run at least one automated test suite to ensure the changes meet expectations",
                "controls": [ { "class": "OSPS", "id": "QA-06" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01",
                    "code": "size(predicates) > 0",
                    "predicates": {
                        "types": ["https://in-toto.io/attestation/test-result/v0.1"]
                    },
                    "assessment": {
                        "message": "Attested test run found"
                    },
                    "error": {
                        "message": "No attested test runs found",
                        "guidance": "Generate a test-run attestation to capture your unit tests"
                    }
                },
                {
                    "id": "01b",
                    "code": "outputs.status == 'pass' ",
                    "outputs": {
                        "status": { "code": "has(predicates[0].data.passed) ? predicates[0].data.passed : '' " }
                    },
                    "predicates": {
                        "types": ["https://in-toto.io/attestation/test-result/v0.1"]
                    },
                    "assessment": {
                        "message": "Tests are not passing"
                    },
                    "error": {
                        "message": "Some of the attested test runs failed",
                        "guidance": "Ensure the project's tests are passing before releasing"
                    }
                }
            ]
        },
        {
            "id": "OSPS-QA-07",
            "meta": {
                "enforce": "OFF",
                "description": "VCS MUST require at least one non-author approval of changes to the primary branch.",
                "controls": [ { "class": "OSPS", "id": "QA-07" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-scorecard",
                    "code": "outputs.bin_artifacts_checks.all(c, c.score == 10)",
                    "outputs": {
                        "bin_artifacts_checks": { "code": "has(predicates[0].data.checks) ? predicates[0].data.checks.filter(c, c.name == 'Code-Review' && has(c.score)) : [] " }
                    },
                    "predicates": {
                        "types": ["https://scorecard.dev/result/v0.1"]
                    },
                    "assessment": {
                        "message": "Scorecard reports code review is required for changes"
                    },
                    "error": {
                        "message": "Scorecard detected code review is not enabled in the repository",
                        "guidance": "Ensure your repo requires a review from another party for every pull request"
                    }
                }
            ]
        },
        {
            "id": "OSPS-SA-01",
            "meta": {
                "enforce": "OFF",
                "description": "design documentation demonstrating all actions and actors within the system",
                "controls": [ { "class": "OSPS", "id": "SA-01" } ]
            },
            "tenets": [
                {
                    "id": "01",
                    "predicates": { "types": ["https://slsa.dev/provenance/v0.2"] },
                    "code": "false",
                    "error": {
                        "message": "Not implemented yet",
                        "guidance": "We don't have a way to detect documentation about actors and actions in the system"
                    }
                }
            ]
        },
        {
            "id": "OSPS-SA-02",
            "meta": {
                "enforce": "OFF",
                "description": "descriptions of all external software interfaces",
                "controls": [ { "class": "OSPS", "id": "SA-02" } ]
            },
            "tenets": [
                {
                    "id": "01",
                    "predicates": { "types": ["https://slsa.dev/provenance/v0.2"] },
                    "code": "false",
                    "error": {
                        "message": "Not implemented yet",
                        "guidance": "We don't have a way to detect documentation about the external interfaces"
                    }
                }
            ]
        },
        {
            "id": "OSPS-SA-03",
            "meta": {
                "enforce": "OFF",
                "description": "VCS MUST require at least one non-author approval of changes to the primary branch.",
                "controls": [ { "class": "OSPS", "id": "SA-03" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-si",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "code": "size(outputs.assessments) > 0",
                    "outputs": {
                        "assessments": {
                            "code": "has(predicates[0].data.security) ? (has(predicates[0].data.security.assessments) ? predicates[0].data.security.assessments : {} ) : {} "
                        }
                    },
                    "assessment": {
                        "message": "Found at least one securioty assessment listed in security insights."
                    },
                    "error": {
                        "message": "No assessments found in security insights",
                        "guidance": "Perform a security assessment on your project and record it in SECURITY_INSIGHTS.yml"
                    }
                },
                {
                    "id": "02",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "code": "false",
                    "error": {
                        "message": "Not implemented yet",
                        "guidance": "We don't have a way to detect threat models yet"
                    }
                }
            ]
        },
        {
            "id": "OSPS-BR-01",
            "meta": {
                "enforce": "OFF",
                "description": "The project's build and release pipelines MUST NOT permit untrusted input",
                "controls": [ { "class": "OSPS", "id": "BR-01" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-scorecard",
                    "code": "outputs.bin_artifacts_checks.all(c, c.score == 10)",
                    "outputs": {
                        "bin_artifacts_checks": { "code": "has(predicates[0].data.checks) ? predicates[0].data.checks.filter(c, c.name == 'Dangerous-Workflow' && has(c.score)) : [] " }
                    },
                    "predicates": {
                        "types": ["https://scorecard.dev/result/v0.1"]
                    },
                    "assessment": {
                        "message": "Scorecard found no dangerous pipelines"
                    },
                    "error": {
                        "message": "Scorecard detected workflows with dangerous patterns",
                        "guidance": "Review your workflow files and look for dangerous patterns"
                    }
                }
            ]
        },
        {
            "id": "OSPS-BR-02",
            "meta": {
                "description": "Releases and released software assets MUST be assigned a unique version identifier",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "BR-02" } ],
                "assert_mode": "OR"
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-sbom",
                    "predicates": {
                        "types": ["https://spdx.dev/Document", "https://cyclonedx.org/bom"]
                    },
                    "outputs": {
                        "versions": { "code": "sboms[0].get_node_list().get_root_nodes().map(s, s.version)" } 
                    },
                    "code": "outputs.versions.all(s, s != \"\")",
                    "assessment": {  "message": "All top level components have versions" },
                    "error": {
                        "message": "Som of the top level components in the SBOM are missing versions.",
                        "guidance": "Ensure the SBOM generation tool is capturing the release version."
                    }
                }
            ]            
        },
        {
            "id": "OSPS-BR-04",
            "meta": {
                "description": "When an official release is created, that release MUST contain a descriptive log of functional and security modifications.",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "BR-04" } ],
                "assert_mode": "OR"
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-sbom",
                    "code": "size(outputs[\"files\"]) > 0",
                    "predicates": {
                        "types": ["https://spdx.dev/Document", "https://cyclonedx.org/bom"]
                    },
                    "outputs": {
                        "files": {
                            "code": "sboms[0].get_node_list().get_nodes().filter(n, (n.name == 'CHANGELOG' || n.name == 'changelog.txt' ))"
                        }
                    },
                    "assessment": {
                        "message": "Found a changelog in the project's SBOM."
                    },
                    "error": {
                        "message": "Could not detect a changelog file in the SBOM.",
                        "guidance": "Add a file named CHANGELOG to your project's codebase registering major changes."
                    }
                },
                {
                    "id": "01-si",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "code": "outputs.changelog != '' ",
                    "outputs": {
                        "changelog": {
                            "code": "has(predicates[0].data.repository) ? (has(predicates[0].data.repository.release) ? (has(predicates[0].data.repository.release.changelog) ? predicates[0].data.repository.release.changelog : '') : '') : '' "
                        }
                    },
                    "assessment": {
                        "message": "Found a changelog entry in the project's security insights file."
                    },
                    "error": {
                        "message": "Could not detect a changelog file in the security insights file.",
                        "guidance": "Add a changelog entry to your SI file under repository.release.changelog"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-BR-05",
            "meta": {
                "description": "The project documentation MUST include an explanation of the contribution process.",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "BR-05" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-lockfile",
                    "code": "size(outputs[\"files\"]) > 0",
                    "predicates": {
                        "types": ["https://spdx.dev/Document", "https://cyclonedx.org/bom"]
                    },
                    "outputs": {
                        "files": {
                            "code": "sboms[0].get_node_list().get_nodes().filter(n, (n.name == 'requirements.txt' || n.name == 'poetry.lock' || n.name == 'go.mod' || n.name == 'package.lock' || n.name == 'Gemfile.lock' ))"
                        }
                    },
                    "assessment": {
                        "message": "Found a package lock file"
                    },
                    "error": {
                        "message": "Could not detect a package lock file",
                        "guidance": "Ensure your project uses go, pypy, npm or ruby gems tooling o handle dependencies"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-BR-06",
            "meta": {
                "description": "Release MUST be signed or accounted for in a signed manifest",
                "assert_mode": "AND",
                "controls": [
                    { "class": "OSPS", "id": "BR-06" }
                ]
            },
            "tenets": [
                {
                    "id": "slsa",
                    "code": "size(predicates) > 0",
                    "predicates": {
                        "types": ["https://slsa.dev/provenance/v0.2"]
                    },
                    "error": {
                        "message": "No SLSA attestation found",
                        "guidance": "Capture the build process in a SLSA provenance attestation"
                    },
                    "assessment": {
                        "message": "SLSA provenance attestation found"

                    }
                }
            ]            
        },
        {
            "id": "OSPS-DO-01",
            "meta": {
                "description": "The project documentation MUST provide user guides for all basic functionality",
                "assert_mode": "AND",
                "controls": [
                    { "class": "OSPS", "id": "DO-01" }
                ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "identities": [
                {
                    "sigstore": {
                        "mode": "exact",
                        "issuer": "https://accounts.google.com",
                        "identity": "puerco@carabiner.dev"
                   }
                }
            ],
            "tenets": [
                {
                    "code": "size(predicates) > 0",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "error": {
                        "message": "No Security Insights attestation found",
                        "guidance": "Capture your security insights flile in an attestations at build point"
                    },
                    "assessment": {
                        "message": "Security Insights attestation found"

                    }
                },   
                {
                    "code": "outputs[\"docs\"] != \"\"",
                    "outputs": {
                        "docs": {
                            "code": "\"documentation\" in predicates[0].data.project ? (\"detailed-guide\" in predicates[0].data.project.documentation ? predicates[0].data.project.documentation[\"detailed-guide\"] : \"\" ) : \"\" "
                        }
                    },
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "assessment": {
                        "message": "Documentation link found in SECURITY_INSIGHTS.yaml"
                    },
                    "error": {
                        "message": "No documentation link found in SI",
                        "guidance": "Add a security insights file to your repository and define a documentation link"
                    }
                }
            ]            
        },
        {
            "id": "OSPS-DO-02",
            "meta": {
                "description": "The project MUST provide a mechanism for reporting defects.",
                "assert_mode": "AND",
                "controls": [
                    { "class": "OSPS", "id": "DO-02" }
                ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "identities": [
                {
                    "sigstore": {
                        "mode": "exact",
                        "issuer": "https://accounts.google.com",
                        "identity": "puerco@carabiner.dev"
                   }
                }
            ],
            "tenets": [               
                {
                    "code": "outputs[\"reporting\"]  ",
                    "outputs": {
                        "reporting": {
                            "code": "\"vulnerability-reporting\" in predicates[0].data.project ? (\"reports-accepted\" in predicates[0].data.project[\"vulnerability-reporting\"] ? predicates[0].data.project[\"vulnerability-reporting\"][\"reports-accepted\"]  : false  ) : false "
                        }
                    },
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "assessment": {
                        "message": "Project accepts vulnerability reports according to SECURITY_INSIGHTS.yml"
                    },
                    "error": {
                        "message": "No vulnerability reports found in SI",
                        "guidance": "Add a security insights file to your repository and define reports-accepted as true under vulnerability-reporting"
                    }
                },
                {
                    "code": "outputs[\"vulnerability-report-contact\"]  ",
                    "outputs": {
                        "vulnerability-report-contact": {
                            "code": "\"vulnerability-reporting\" in predicates[0].data.project ? (\"contact\" in predicates[0].data.project[\"vulnerability-reporting\"]  ) : false "
                        }
                    },
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "assessment": {
                        "message": "Vulnerability report contact found"
                    },
                    "error": {
                        "message": "No contact information found in SECURITY_INSIGHTS.yml",
                        "guidance": "Add contact data in the project's SECURITY_INSIGHTS.yml file, under vulnerability-reporting"
                    }
                }
            ]
        },
        {
            "id": "OSPS-DO-03",
            "meta": {
                "description": "Instructions to verify the integrity and authenticity of the release assets",
                "assert_mode": "AND",
                "enforce": "OFF",
                "controls": [
                    { "class": "OSPS", "id": "DO-03" }
                ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-si",
                    "code": "outputs['verify'] != '' ",
                    "outputs": {
                        "verify": {
                            "code": "has(predicates[0].project) ? (has(predicates[0].project.documentation) ? ('signature-verification' in predicates[0].project.documentation ? predicates[0].project.documentation['signature-verification'] : '' ) : '' ) : '' "
                        }
                    },
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "assessment": {
                        "message": "Signature verification instructions found in SECURITY_INSIGHTS.yml"
                    },
                    "error": {
                        "message": "No verification instructions found in SI",
                        "guidance": "Point to instructions to verify your signatures in SECURITY_INSIGHTS.aml"
                    }
                }
            ]
        },
        {
            "id": "OSPS-DO-04",
            "meta": {
                "description": "the project documentation MUST include a descriptive statement about the scope and duration of support",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "DO-04" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-openeox",
                    "predicates": {
                        "types": ["https://docs.oasis-open.org/openeox/core/v1.0"]
                    },
                    "code": "size(predicates) > 0",
                    "assessment": {
                        "message": "Found an OpenEoX statement with the artifact's EOS."
                    },
                    "error": {
                        "message": "No OpenEOX data found.",
                        "guidance": "Capture the project End of Support in an OpenEOX file."
                    }
                }
            ]            
        },
        {
            "id": "OSPS-DO-05",
            "meta": {
                "description": "the project documentation MUST provide a descriptive statement when releases or versions will no longer receive security updates",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "DO-05" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-openeox",
                    "predicates": {
                        "types": ["https://docs.oasis-open.org/openeox/core/v1.0"]
                    },
                    "code": "size(predicates) > 0",
                    "assessment": {
                        "message": "Found an OpenEOX statement with the artifact's EOL."
                    },
                    "error": {
                        "message": "No OpenEOX data found.",
                        "guidance": "Capture the project End of Life in an OpenEOX file."
                    }
                }
            ]
        },
        {
            "id": "OSPS-DO-06",
            "meta": {
                "description": "The project's documentation MUST include a description of how the project selects, obtains, and tracks its dependencies.",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "DO-06" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-si",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "code": "outputs.deppolicy != '' ",
                    "outputs": {
                        "deppolicy": {
                            "code": "has(predicates[0].data.repository) ? (has(predicates[0].data.repository.documentation) ? (has(predicates[0].data.repository.documentation.dependency_management_policy) ? predicates[0].data.repository.documentation.dependency_management_policy : '') : '') : '' "
                        }
                    },
                    "assessment": {
                        "message": "Found a link to the projects dependency policy in SECURITY_INSIGHTS.yml"
                    },
                    "error": {
                        "message": "Could not detect a dependency policy in the Security Insights file.",
                        "guidance": "Add a changelog entry to your SI file under repository.documentation.dependency-management-policy."
                    }
                }
            ]            
        },
        {
            "id": "OSPS-VM-01",
            "meta": {
                "description": "policy for coordinated vulnerability disclosure",
                "assert_mode": "AND",
                "controls": [ { "class": "OSPS", "id": "VM-01" } ],
                "enforce":"OFF"
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [               
                {
                    "id": "01-sbom",
                    "code": "size(outputs[\"files\"]) > 0",
                    "predicates": {
                        "types": ["https://spdx.dev/Document", "https://cyclonedx.org/bom"]
                    },
                    "outputs": {
                        "files": {
                            "code": "sboms[0].get_node_list().get_nodes().filter(n, (n.name == 'SECURITY.md' ))"
                        }
                    },
                    "assessment": {
                        "message": "Found a SECURITY.md file in the project's SBOM."
                    },
                    "error": {
                        "message": "Could not detect a SECURITY.md file in the SBOM.",
                        "guidance": "Add a file named SECURITY.md to your project's vulnerability disclosure policy"
                    }
                }
            ]
        },
        {
            "id": "OSPS-VM-02",
            "meta": {
                "description": "he project MUST publish contacts and process for reporting vulnerabilities",
                "enforce": "OFF",
                "controls": [ { "class": "OSPS", "id": "VM-02" } ]
            },
            "chain": [
                {
                    "predicate": {
                        "type": "https://slsa.dev/provenance/v0.2",
                        "selector": "predicate.data.materials[0]"
                    }
                }
            ],
            "tenets": [
                {
                    "id": "01-si",
                    "predicates": {
                        "types": ["https://github.com/ossf/security-insights-spec"]
                    },
                    "code": "outputs.contact != null ",
                    "outputs": {
                        "contact": {
                            "code": "has(predicates[0].data.project) ? ('vulnerability-reporting' in predicates[0].data.project ? ('contact' in predicates[0].data.project['vulnerability-reporting'] ? predicates[0].data.project['vulnerability-reporting']['contact'] : null) : null) : null"
                        }
                    },
                    "assessment": {
                        "message": "Found vulnerability reporting contact in Security Insights"
                    },
                    "error": {
                        "message": "No vulnerability reporting contact found in SI",
                        "guidance": "Add a vulnerability reporting contact under the project data in the SI yaml file"
                    }
                }
            ]            
        }
    ]
}
