{
    // HJSON format allows comments and relaxed syntax for easier policy authoring
    // This example demonstrates AMPEL PolicySet structure using HJSON features

    id: OSPS

    // Meta contains PolicySet-level metadata
    meta: {
        runtime: "cedar@v1.0.0"
        version: 1
        description: "Example AMPEL PolicySet demonstrating HJSON format"
    }

    policies: [
        {
            id: AC-07

            meta: {
                // Policy description explaining its purpose
                description: "The project's version control system MUST require multi-factor authentication that does not include SMS"
                runtime: "cel@v0"
                assert_mode: OR
                version: 1

                // Controls can be linked to compliance frameworks
                controls: [
                    {
                        class: ""
                        id: ""
                    }
                ]
            }

            // Define trusted signer identities
            identities: [
                {
                    sigstore: {
                        mode: "exact"
                        issuer: "https://accounts.google.com/"
                        identity: "puerco@gmail.com"
                    }
                }
            ]

            // Context values allow policies to be reusable across environments
            context: {
                // String context value with default
                author: {
                    type: "string"
                    required: true
                    default: "Puerco"
                }

                // Integer context value
                count: {
                    type: "int"
                    required: true
                    default: 1
                }

            }

            // Transformers normalize predicate data for easier policy authoring
            transformers: [
                { id: "internal:protobom" }
            ]

            // Tenets are the core policy checks
            tenets: [
                {
                    // Check that predicates were loaded
                    runtime: "cel@v14.0"
                    code: "size(predicates) > 0"

                    predicates: {
                        types: ["application/protobom"]
                    }
                }

                {
                    // Validate SBOM metadata with outputs
                    runtime: "cel@v14.0"

                    // Outputs extract values from evaluation results
                    outputs: {
                        first_sbom_name: {
                            code: "predicates[0].data.metadata.name"
                        }
                    }

                    code: "predicates[0].data.metadata.name == \"SBOM-SPDX-08bdfa07-a9a1-404e-b892-9f45896c715a\""
                }

                {
                    // Check context value (demonstrates context usage)
                    runtime: "cel@v14.0"
                    code: "context.author == \"Puerco\""

                    outputs: {
                        author: {code: "context.author"}
                        context: {code: "context"}
                    }
                }
            ]
        }
    ]
}
